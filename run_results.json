{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.13", "generated_at": "2024-05-10T17:47:05.714932Z", "invocation_id": "6b301e62-a2c7-499a-873b-d802e5e66f7f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.695688Z", "completed_at": "2024-05-10T17:47:02.720697Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.722201Z", "completed_at": "2024-05-10T17:47:02.722214Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02912449836730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_table_samples_part", "compiled": true, "compiled_code": "\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as sample_data\n    \n    from types_table\n    where string_type is not null\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_table_samples_part"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.726623Z", "completed_at": "2024-05-10T17:47:02.734996Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.736465Z", "completed_at": "2024-05-10T17:47:02.736472Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012514591217041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_monitored", "compiled": true, "compiled_code": "\n\n\n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as name,\n    \n         string_type as schema,\n    \n         string_type as database,\n    \n         string_type as time_filter,\n    \n         string_type as metrics_groups,\n    \n         string_type as additional_metrics,\n    \n         string_type as metrics,\n    \n         string_type as columns,\n    \n         string_type as anomaly_detector,\n    \n         string_type as owners,\n    \n         boolean_type as selected\n    \n    from types_table\n    where string_type is not null\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_monitored"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.740957Z", "completed_at": "2024-05-10T17:47:02.745640Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.747122Z", "completed_at": "2024-05-10T17:47:02.747129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008954048156738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_run_started_at", "compiled": true, "compiled_code": "\n\nselect 1715363221432240.0 as run_started_at", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.751571Z", "completed_at": "2024-05-10T17:47:02.759306Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.760817Z", "completed_at": "2024-05-10T17:47:02.760825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0118560791015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_test_history", "compiled": true, "compiled_code": "\n\n\n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as test_name,\n    \n         string_type as status,\n    \n         numeric_type as execution_time,\n    \n         string_type as message,\n    \n         numeric_type as failures_count,\n    \n         long_string_type as failures_json,\n    \n         long_string_type as failures_table,\n    \n         string_type as severity,\n    \n         long_string_type as compiled_sql,\n    \n         timestamp_type as run_at\n    \n    from types_table\n    where string_type is not null\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_test_history"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.765218Z", "completed_at": "2024-05-10T17:47:02.768546Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.770051Z", "completed_at": "2024-05-10T17:47:02.770058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075626373291015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sp_dbt_poc.stg_customers", "compiled": true, "compiled_code": "SELECT\n    CustomerID,\n    FirstName,\n    LastName,\n    FirstName || ' ' || LastName AS CustomerName,\n    Email,\n    Phone,\n    Address,\n    City,\n    State,\n    ZipCode,\n    Updated_at\nFROM\n    L1_BRONZE.customers", "relation_name": "DB_DBT_DEMO_101.L2_SILVER.stg_customers"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.774264Z", "completed_at": "2024-05-10T17:47:02.778361Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.779818Z", "completed_at": "2024-05-10T17:47:02.779825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008155107498168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sp_dbt_poc.stg_orderitems", "compiled": true, "compiled_code": "SELECT\n    OrderItemID,\n    OrderID,\n    ProductID,\n    Quantity,\n    UnitPrice,\n    Updated_at,\n    QUANTITY * UNITPRICE as TotalPrice\nFROM\n    L1_BRONZE.OrderItems", "relation_name": "DB_DBT_DEMO_101.L2_SILVER.stg_orderitems"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.784227Z", "completed_at": "2024-05-10T17:47:02.787369Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.788855Z", "completed_at": "2024-05-10T17:47:02.788862Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007391929626464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sp_dbt_poc.stg_orders", "compiled": true, "compiled_code": "SELECT\n    OrderID,\n    OrderDate,\n    CustomerID,\n    EmployeeID,\n    StoreID,\n    Status,\n    Updated_at\nFROM\n    L1_BRONZE.orders", "relation_name": "DB_DBT_DEMO_101.L2_SILVER.stg_orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.793191Z", "completed_at": "2024-05-10T17:47:02.805035Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.806485Z", "completed_at": "2024-05-10T17:47:02.806492Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016034841537475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "compiled": true, "compiled_code": "", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.810794Z", "completed_at": "2024-05-10T17:47:02.815956Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.817369Z", "completed_at": "2024-05-10T17:47:02.817376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009140253067016602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.re_data.re_data-on-run-end-0", "compiled": true, "compiled_code": "", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.821640Z", "completed_at": "2024-05-10T17:47:02.825963Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.827442Z", "completed_at": "2024-05-10T17:47:02.827450Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008476972579956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_selected", "compiled": true, "compiled_code": "select \n    name, schema, database, time_filter, metrics, columns, anomaly_detector, owners\nfrom DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\nwhere \n    selected = true", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_selected"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.831768Z", "completed_at": "2024-05-10T17:47:02.836536Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.838037Z", "completed_at": "2024-05-10T17:47:02.838044Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008914470672607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_test_runs", "compiled": true, "compiled_code": "\n\nselect \n    sum(case when status = 'Fail' then 1 else 0 end) as failed,\n    sum(case when status = 'Pass' then 1 else 0 end) as passed,\n    run_at\nfrom DB_DBT_DEMO_101.L3_GOLD.re_data_test_history\ngroup by run_at\norder by run_at desc", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_test_runs"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.842298Z", "completed_at": "2024-05-10T17:47:02.847134Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.848649Z", "completed_at": "2024-05-10T17:47:02.848658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008952140808105469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sp_dbt_poc.test_stg_orderitems_max_flagship_product_quantity_per_order", "compiled": true, "compiled_code": "-- stg_orders for a product_id=5(flagship product), customers can only order at max 5 items\n-- Therefore return records where this isn't true to make the test fail\n-- SP Observation - Custom singular tests work better with soda IMHO. \n\nselect *\nfrom DB_DBT_DEMO_101.L2_SILVER.stg_orderitems \nwhere productid='101' and quantity > 5", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.852896Z", "completed_at": "2024-05-10T17:47:02.857509Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.858996Z", "completed_at": "2024-05-10T17:47:02.859004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008710622787475586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sp_dbt_poc.customerorders", "compiled": true, "compiled_code": "\n\nWITH CUSTOMERORDERS AS (\n\nSELECT\n    c.CustomerID,\n    c.FirstName || ' ' || c.LastName AS CustomerName,\n    COUNT(o.OrderID) AS NumberOfOrders\nFROM\n    DB_DBT_DEMO_101.L2_SILVER.stg_customers c\nLEFT JOIN\n    DB_DBT_DEMO_101.L2_SILVER.stg_orders o ON c.CustomerID = o.CustomerID\nGROUP BY\n    c.CustomerID,\n    c.FirstName || ' ' || c.LastName\nORDER BY\n    c.CustomerID\n)\nSELECT *\nFROM CUSTOMERORDERS", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.customerorders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.863469Z", "completed_at": "2024-05-10T17:47:02.867799Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.869303Z", "completed_at": "2024-05-10T17:47:02.869311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00859975814819336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sp_dbt_poc.fact_orders", "compiled": true, "compiled_code": "SELECT\n    o.OrderID,\n    o.OrderDate,\n    O.CustomerID,\n    o.EmployeeID,\n    o.StoreID,\n    o.Status,\n    o.Updated_at,\n    count(distinct  o.orderID) as OrderCount,\n    sum(oi.TotalPrice) as Revenue    \nFROM\n    DB_DBT_DEMO_101.L2_SILVER.stg_orders o\nJOIN\n    DB_DBT_DEMO_101.L2_SILVER.stg_orderitems oi on o.orderID = oi.orderID\nGROUP BY \n    o.OrderID,\n    o.OrderDate,\n    O.CustomerID,\n    o.EmployeeID,\n    o.StoreID,\n    o.Status,\n    o.Updated_at", "relation_name": "DB_DBT_DEMO_101.L2_SILVER.fact_orders"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.873798Z", "completed_at": "2024-05-10T17:47:02.888069Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:02.889617Z", "completed_at": "2024-05-10T17:47:02.889624Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01858353614807129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sp_dbt_poc.accepted_values_stg_orders_STATUS__Pending__Completed.905842c259", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        STATUS as value_field,\n        count(*) as n_records\n\n    from DB_DBT_DEMO_101.L2_SILVER.stg_orders\n    group by STATUS\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Pending','Completed'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:02.893951Z", "completed_at": "2024-05-10T17:47:03.203600Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.205162Z", "completed_at": "2024-05-10T17:47:03.205173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.354508638381958, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_columns", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n\n\n    \n    \n\n    with columns_from_select as (\n        \n            \n            \n    \n    \n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from\n        DB_DBT_DEMO_101.INFORMATION_SCHEMA.COLUMNS\n    where\n        table_schema = 'L3_GOLD'\n\n union all\n        \n            \n            \n    \n    \n    select\n        table_name,\n        table_schema,\n        table_catalog,\n        column_name,\n        data_type,\n        is_nullable\n    from\n        DB_DBT_DEMO_101.INFORMATION_SCHEMA.COLUMNS\n    where\n        table_schema = 'L2_SILVER'\n\n\n        \n    )\n\n    select\n        cast (table_name as \n    \n    STRING\n\n ) as name,\n        cast (table_schema as \n    \n    STRING\n\n ) as schema,\n        cast (table_catalog as \n    \n    STRING\n\n ) as database,\n        cast (column_name as \n    \n    STRING\n\n ) as column_name,\n        cast (data_type as \n    \n    STRING\n\n ) as data_type,\n        cast (case is_nullable when 'YES' then 1 else 0 end as \n    \n    BOOLEAN\n\n ) as is_nullable,\n        cast (\n  current_timestamp::timestamp\n as \n    \n    TIMESTAMP_NTZ\n\n) as computed_on\n    from columns_from_select\n\n    \n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_columns"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.250382Z", "completed_at": "2024-05-10T17:47:03.258140Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.259629Z", "completed_at": "2024-05-10T17:47:03.259637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012149572372436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sp_dbt_poc.check_distinct_min_max_counts_customerorders_NUMBEROFORDERS__2000__1.8c3d710e0d", "compiled": true, "compiled_code": "\n    WITH get_metrics AS (\n        SELECT COUNT( DISTINCT NUMBEROFORDERS)  AS dist_count_rank\n                , MIN(NUMBEROFORDERS)    AS min_rank\n                , MAX(NUMBEROFORDERS)    AS max_rank\n        FROM DB_DBT_DEMO_101.L3_GOLD.customerorders\n    ) \n \n    SELECT * \n    FROM get_metrics\n    WHERE dist_count_rank > 2000\n        AND min_rank < 1\n        AND max_rank > 2000\n \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.263990Z", "completed_at": "2024-05-10T17:47:03.321179Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.322692Z", "completed_at": "2024-05-10T17:47:03.322703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06138443946838379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sp_dbt_poc.customerrevenue", "compiled": true, "compiled_code": "\n\nSELECT\n    fact_o.CustomerID,\n    stg_c.CustomerName,\n    SUM(fact_o.OrderCount) as OrderCount,\n    SUM(fact_o.Revenue)::float as Revenue\nFROM DB_DBT_DEMO_101.L2_SILVER.fact_orders fact_o\nJOIN DB_DBT_DEMO_101.L2_SILVER.stg_customers stg_c\n    ON fact_o.CustomerID = stg_c.CustomerID\nGROUP BY\n    fact_o.CustomerID,\n    stg_c.CustomerName", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.customerrevenue"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.327177Z", "completed_at": "2024-05-10T17:47:03.349977Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.351492Z", "completed_at": "2024-05-10T17:47:03.351500Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027002811431884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_columns_over_time", "compiled": true, "compiled_code": "\n\n\nwith columns as (\n\nselect\n    \n    \n    '\"' || cols.database || '\"' || '.' || '\"' || cols.schema || '\"' || '.' || '\"' || cols.name || '\"'\n\n as table_name,\n    cols.column_name,\n    cols.data_type,\n    cols.is_nullable,\n    cast (\n  current_timestamp::timestamp\n as \n    \n    TIMESTAMP_NTZ\n\n ) as detected_time\nfrom\n    DB_DBT_DEMO_101.L3_GOLD.re_data_columns cols, DB_DBT_DEMO_101.L3_GOLD.re_data_selected tables\nwhere\n    cols.name = tables.name and cols.schema = tables.schema and cols.database = tables.database\n)\n\nselect\n    cast (md5(cast(coalesce(cast(table_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(column_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(detected_time as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \n    \n    STRING\n\n ) as id,\n    table_name,\n    column_name,\n    data_type,\n    is_nullable,\n    detected_time\nfrom columns", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_columns_over_time"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.355938Z", "completed_at": "2024-05-10T17:47:03.364992Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.366493Z", "completed_at": "2024-05-10T17:47:03.366501Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013271331787109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_part0", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part0"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.370905Z", "completed_at": "2024-05-10T17:47:03.377736Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.379223Z", "completed_at": "2024-05-10T17:47:03.379231Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010950088500976562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_part1", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.383625Z", "completed_at": "2024-05-10T17:47:03.389652Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.391130Z", "completed_at": "2024-05-10T17:47:03.391138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010277271270751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_part2", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.395633Z", "completed_at": "2024-05-10T17:47:03.401530Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.403013Z", "completed_at": "2024-05-10T17:47:03.403021Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010114908218383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_part3", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n\n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.407479Z", "completed_at": "2024-05-10T17:47:03.671850Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.673405Z", "completed_at": "2024-05-10T17:47:03.673415Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3117499351501465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_table_samples", "compiled": true, "compiled_code": "\n    \n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_table_samples_part\n    \n\n\n\n    \n\n    \n        \n    \n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as sample_data\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_table_samples"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.721000Z", "completed_at": "2024-05-10T17:47:03.726887Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.728366Z", "completed_at": "2024-05-10T17:47:03.728373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01020956039428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sp_dbt_poc.check_distinct_min_max_counts_customerrevenue_ORDERCOUNT__2000__1.cf468ed9df", "compiled": true, "compiled_code": "\n    WITH get_metrics AS (\n        SELECT COUNT( DISTINCT ORDERCOUNT)  AS dist_count_rank\n                , MIN(ORDERCOUNT)    AS min_rank\n                , MAX(ORDERCOUNT)    AS max_rank\n        FROM DB_DBT_DEMO_101.L3_GOLD.customerrevenue\n    ) \n \n    SELECT * \n    FROM get_metrics\n    WHERE dist_count_rank > 2000\n        AND min_rank < 1\n        AND max_rank > 2000\n \n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.732821Z", "completed_at": "2024-05-10T17:47:03.909033Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.910539Z", "completed_at": "2024-05-10T17:47:03.910548Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22439336776733398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sp_dbt_poc.dbt_expectations_expect_table_column_count_to_equal_customerrevenue_4.d8fd429a2a", "compiled": true, "compiled_code": "with test_data as (\n\n    select\n        4 as number_actual_columns,\n        4 as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.958981Z", "completed_at": "2024-05-10T17:47:03.979477Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:03.981061Z", "completed_at": "2024-05-10T17:47:03.981070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024735212326049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sp_dbt_poc.dbt_expectations_expect_table_row_count_to_be_between_customerrevenue_1500__1.e7dc6cbf73", "compiled": true, "compiled_code": "\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and count(*) >= 1 and count(*) <= 1500\n)\n as expression\n\n\n    from DB_DBT_DEMO_101.L3_GOLD.customerrevenue\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:03.985456Z", "completed_at": "2024-05-10T17:47:04.247047Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:04.248566Z", "completed_at": "2024-05-10T17:47:04.248579Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.30982255935668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_schema_changes", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns_over_time\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n\n\n    \n\n\n\n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as id,\n    \n         string_type as table_name,\n    \n         string_type as operation,\n    \n         string_type as column_name,\n    \n         string_type as data_type,\n    \n         boolean_type as is_nullable,\n    \n         string_type as prev_column_name,\n    \n         string_type as prev_data_type,\n    \n         boolean_type as prev_is_nullable,\n    \n         timestamp_type as detected_time\n    \n    from types_table\n    where string_type is not null\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_schema_changes"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:04.297174Z", "completed_at": "2024-05-10T17:47:04.580221Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:04.581786Z", "completed_at": "2024-05-10T17:47:04.581801Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3331015110015869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_thread0", "compiled": true, "compiled_code": "\n    \n    \n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part0\n    \n\n\n\n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread0"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:04.632185Z", "completed_at": "2024-05-10T17:47:04.826789Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:04.828307Z", "completed_at": "2024-05-10T17:47:04.828318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.24953985214233398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_thread1", "compiled": true, "compiled_code": "\n    \n    \n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part1\n    \n\n\n\n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:04.883539Z", "completed_at": "2024-05-10T17:47:05.108447Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.109988Z", "completed_at": "2024-05-10T17:47:05.110000Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3517780303955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_thread2", "compiled": true, "compiled_code": "\n    \n    \n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part2\n    \n\n\n\n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.237219Z", "completed_at": "2024-05-10T17:47:05.473413Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.474946Z", "completed_at": "2024-05-10T17:47:05.474959Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2910737991333008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_base_metrics_thread3", "compiled": true, "compiled_code": "\n    \n    \n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n    \n        -- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part3\n    \n\n\n\n    \n\n    \n\n    \n    \n    \n    with types_table as (\n        select\n            cast (null as \n    \n    STRING\n\n) as string_type,\n            cast (null as \n    \n    \n    \n    STRING\n\n\n\n) as long_string_type,\n            cast (1 as \n    \n    FLOAT\n\n) as numeric_type,\n            cast ('2000-01-10' as \n    \n    TIMESTAMP_NTZ\n\n) as timestamp_type,\n            cast (true as \n    \n    BOOLEAN\n\n) as boolean_type\n    )\n\n    select\n    \n         string_type as table_name,\n    \n         string_type as column_name,\n    \n         string_type as metric,\n    \n         numeric_type as value\n    \n    from types_table\n    where string_type is not null\n\n\n\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.530436Z", "completed_at": "2024-05-10T17:47:05.538660Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.540161Z", "completed_at": "2024-05-10T17:47:05.540170Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012464523315429688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_table_samples", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_table_samples\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_table_samples_part\n\nselect\n    table_name,\n    sample_data,\n    cast (\n  current_timestamp::timestamp\n as \n    \n    TIMESTAMP_NTZ\n\n) as sampled_on\n\nfrom DB_DBT_DEMO_101.L3_GOLD.re_data_last_table_samples_part", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_table_samples"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.544566Z", "completed_at": "2024-05-10T17:47:05.574875Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.576390Z", "completed_at": "2024-05-10T17:47:05.576399Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03458094596862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_base_metrics", "compiled": true, "compiled_code": "\n\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_columns\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread0\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread1\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread2\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_thread3\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part0\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part1\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part2\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part3\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_run_started_at\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_monitored\n-- depends_on: DB_DBT_DEMO_101.L3_GOLD.re_data_selected\n\nwith \n\nwith_time_window as (\n    \n    \n        \n        select\n            *,\n            \n    cast('2024-05-09 00:00:00' as timestamp) \n as time_window_start,\n            \n    cast('2024-05-10 00:00:00' as timestamp)\n as time_window_end\n        from DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part0 union all\n    \n        \n        select\n            *,\n            \n    cast('2024-05-09 00:00:00' as timestamp) \n as time_window_start,\n            \n    cast('2024-05-10 00:00:00' as timestamp)\n as time_window_end\n        from DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part1 union all\n    \n        \n        select\n            *,\n            \n    cast('2024-05-09 00:00:00' as timestamp) \n as time_window_start,\n            \n    cast('2024-05-10 00:00:00' as timestamp)\n as time_window_end\n        from DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part2 union all\n    \n        \n        select\n            *,\n            \n    cast('2024-05-09 00:00:00' as timestamp) \n as time_window_start,\n            \n    cast('2024-05-10 00:00:00' as timestamp)\n as time_window_end\n        from DB_DBT_DEMO_101.L3_GOLD.re_data_last_base_metrics_part3\n    \n)\nselect\n    cast (md5(cast(coalesce(cast(table_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(column_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(metric as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(time_window_start as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(time_window_end as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \n    \n    STRING\n\n ) as id,\n    cast (table_name as \n    \n    STRING\n\n ) as table_name,\n    cast (column_name as \n    \n    STRING\n\n ) as column_name,\n    cast (metric as \n    \n    STRING\n\n ) as metric,\n    cast (value as \n    \n    FLOAT\n\n ) as value,\n    cast (time_window_start as \n    \n    TIMESTAMP_NTZ\n\n ) as time_window_start,\n    cast (time_window_end as \n    \n    TIMESTAMP_NTZ\n\n ) as time_window_end,\n    cast (\n        \n    \n   timediff(second, time_window_start, time_window_end)\n\n as \n    INTEGER\n\n    ) as interval_length_sec,\n    cast (\n  current_timestamp::timestamp\n as \n    \n    TIMESTAMP_NTZ\n\n) as computed_on\nfrom with_time_window", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_base_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.581230Z", "completed_at": "2024-05-10T17:47:05.586915Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.588369Z", "completed_at": "2024-05-10T17:47:05.588376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0098724365234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_metrics", "compiled": true, "compiled_code": "select\n    table_name,\n    column_name,\n    metric,\n    value as last_value,\n    interval_length_sec,\n    computed_on\nfrom \n    DB_DBT_DEMO_101.L3_GOLD.re_data_base_metrics\nwhere\n    time_window_end =\n    cast('2024-05-10 00:00:00' as timestamp)\n", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.592788Z", "completed_at": "2024-05-10T17:47:05.618172Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.619668Z", "completed_at": "2024-05-10T17:47:05.619675Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029628992080688477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_last_stats", "compiled": true, "compiled_code": "\n\nwith median_value as (\n    select distinct\n        table_name,\n        column_name,\n        metric,\n        interval_length_sec,\n        avg(value)  over(partition by table_name, column_name, metric, interval_length_sec)  as last_avg,\n        \n\n    percentile_cont( \n        0.25 )\n        within group ( order by value )\n        over ( partition by table_name, column_name, metric, interval_length_sec )\n\n as last_first_quartile,\n        \n\n    percentile_cont( \n        0.5 )\n        within group ( order by value )\n        over ( partition by table_name, column_name, metric, interval_length_sec )\n\n as last_median,\n        \n\n    percentile_cont( \n        0.75 )\n        within group ( order by value )\n        over ( partition by table_name, column_name, metric, interval_length_sec )\n\n as last_third_quartile\n    from\n        DB_DBT_DEMO_101.L3_GOLD.re_data_base_metrics\n    where\n        time_window_end >\n   \n    DATEADD('DAY', -30, \n    cast('2024-05-09 00:00:00' as timestamp) \n)\n\nand\n        time_window_end <=\n    cast('2024-05-10 00:00:00' as timestamp)\n\n    \n), abs_deviation as (\n    select \n        s.table_name,\n        s.column_name,\n        s.metric,\n        s.interval_length_sec,\n        abs( s.value - mv.last_avg ) as absolute_deviation_from_mean,\n        abs( s.value - mv.last_median ) as absolute_deviation_from_median\n    from\n        DB_DBT_DEMO_101.L3_GOLD.re_data_base_metrics s\n    left join \n        median_value mv\n        on\n            s.table_name = mv.table_name and\n            s.column_name = mv.column_name and\n            s.metric = mv.metric and\n            s.interval_length_sec = mv.interval_length_sec\n    where\n        s.time_window_end >\n   \n    DATEADD('DAY', -30, \n    cast('2024-05-09 00:00:00' as timestamp) \n)\n\nand\n        s.time_window_end <=\n    cast('2024-05-10 00:00:00' as timestamp)\n), median_abs_deviation as (\n    select distinct\n        table_name,\n        column_name,\n        metric,\n        interval_length_sec,\n        avg(absolute_deviation_from_mean)  over(partition by table_name, column_name, metric, interval_length_sec)  as mean_absolute_deviation,\n        \n\n    percentile_cont( \n        0.5 )\n        within group ( order by absolute_deviation_from_median )\n        over ( partition by table_name, column_name, metric, interval_length_sec )\n\n as median_absolute_deviation\n    from\n        abs_deviation\n    \n), stats as (\n    select\n        table_name,\n        column_name,\n        metric,\n        stddev(value) as last_stddev,\n        max(time_window_end) as last_metric_time,\n        interval_length_sec,\n        max(computed_on) as computed_on\n    from\n        DB_DBT_DEMO_101.L3_GOLD.re_data_base_metrics\n    where\n        time_window_end >\n   \n    DATEADD('DAY', -30, \n    cast('2024-05-09 00:00:00' as timestamp) \n)\n\nand\n        time_window_end <=\n    cast('2024-05-10 00:00:00' as timestamp)\ngroup by\n        table_name, column_name, metric, interval_length_sec\n)\n\nselect\n    s.table_name,\n    s.column_name,\n    s.metric,\n    mv.last_avg,\n    s.last_stddev,\n    s.last_metric_time,\n    s.interval_length_sec,\n    s.computed_on,\n    mv.last_median,\n    mv.last_first_quartile,\n    mv.last_third_quartile,\n    md.median_absolute_deviation last_median_absolute_deviation,\n    md.mean_absolute_deviation last_mean_absolute_deviation\nfrom\n    stats s\nleft join\n    median_value mv\n    on\n        s.table_name = mv.table_name and\n        s.column_name = mv.column_name and\n        s.metric = mv.metric and\n        s.interval_length_sec = mv.interval_length_sec\nleft join\n    median_abs_deviation md\n    on \n        s.table_name = md.table_name and\n        s.column_name = md.column_name and\n        s.metric = md.metric and\n        s.interval_length_sec = md.interval_length_sec", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_last_stats"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.624021Z", "completed_at": "2024-05-10T17:47:05.628496Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.630228Z", "completed_at": "2024-05-10T17:47:05.630236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008873939514160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_metrics", "compiled": true, "compiled_code": "select * from DB_DBT_DEMO_101.L3_GOLD.re_data_base_metrics", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_metrics"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.634637Z", "completed_at": "2024-05-10T17:47:05.645416Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.646882Z", "completed_at": "2024-05-10T17:47:05.646889Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014934301376342773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_z_score", "compiled": true, "compiled_code": "\n\nwith z_score_without_id as (\n\n    select\n        stats.table_name as table_name,\n        stats.column_name as column_name,\n        stats.metric as metric,\n        stats.interval_length_sec,\n        (last_metric.last_value - stats.last_avg) / (stats.last_stddev + 0.0000000001) as z_score_value,\n        case\n            when stats.last_median_absolute_deviation = 0 then\n                (last_metric.last_value - stats.last_median) / (1.253314 * (stats.last_mean_absolute_deviation + 0.0000000001))\n            else\n                (0.6745 * (last_metric.last_value - stats.last_median)) / (stats.last_median_absolute_deviation + 0.0000000001) \n        end as modified_z_score_value,\n        last_metric.last_value as last_value,\n        stats.last_avg as last_avg,\n        stats.last_median as last_median,\n        stats.last_stddev as last_stddev,\n        stats.last_median_absolute_deviation,\n        stats.last_mean_absolute_deviation,\n        stats.last_third_quartile - stats.last_first_quartile as last_iqr,\n        stats.last_first_quartile,\n        stats.last_third_quartile,\n        \n    cast('2024-05-10 00:00:00' as timestamp)\n as time_window_end,\n        cast( \n  current_timestamp::timestamp\n as \n    \n    TIMESTAMP_NTZ\n\n ) as computed_on\n    from\n        DB_DBT_DEMO_101.L3_GOLD.re_data_last_stats as stats,\n        DB_DBT_DEMO_101.L3_GOLD.re_data_last_metrics as last_metric\n    where\n        stats.table_name = last_metric.table_name and\n        stats.column_name = last_metric.column_name and\n        stats.metric = last_metric.metric and\n        (\n            stats.interval_length_sec = last_metric.interval_length_sec or\n            (stats.interval_length_sec is null and last_metric.interval_length_sec is null)\n        ) and\n        last_metric.last_value is not null and\n        stats.last_avg is not null and\n        stats.last_stddev is not null\n    )\n\nselect\n    cast (md5(cast(coalesce(cast(table_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(column_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(metric as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(interval_length_sec as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(time_window_end as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as \n    \n    STRING\n\n ) as id,\n    table_name,\n    column_name,\n    metric,\n    z_score_value,\n    modified_z_score_value,\n    last_value,\n    last_avg,\n    last_median,\n    last_stddev,\n    last_median_absolute_deviation,\n    last_mean_absolute_deviation,\n    last_iqr,\n    last_first_quartile,\n    last_third_quartile,\n    time_window_end,\n    interval_length_sec,\n    computed_on\n\nfrom z_score_without_id", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_z_score"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.651334Z", "completed_at": "2024-05-10T17:47:05.692894Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.694399Z", "completed_at": "2024-05-10T17:47:05.694407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04565763473510742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_anomalies", "compiled": true, "compiled_code": "\nselect\n    z.id,\n    z.table_name,\n    z.column_name,\n    z.metric,\n    z.z_score_value,\n    z.modified_z_score_value,\n    m.anomaly_detector,\n    z.last_value,\n    z.last_avg,\n    z.last_median,\n    z.last_stddev,\n    z.last_median_absolute_deviation,\n    z.last_mean_absolute_deviation,\n    z.last_iqr,\n    z.last_first_quartile - (cast( \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'whisker_boundary_multiplier' )\n\n as \n    \n    FLOAT\n\n ) * z.last_iqr) lower_bound,\n    z.last_third_quartile + (cast( \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'whisker_boundary_multiplier' )\n\n as \n    \n    FLOAT\n\n ) * z.last_iqr) upper_bound,\n    z.last_first_quartile,\n    z.last_third_quartile,\n    z.time_window_end,\n    z.interval_length_sec,\n    z.computed_on,\n    \n\n    case when z.column_name != '' then metric || '(' || column_name || ')'\n    else metric\n    end \n    || ' is ' ||\n    \n    \n    trim(to_char(\n    abs(\n        ( \n            cast(last_value - last_avg as \n    \n    FLOAT\n\n)\n        ) / \n        nullif(\n            cast( z.last_avg as \n    \n    FLOAT\n\n )\n        , 0) * 100.0\n    )\n, '9999999999999999990D00'))\n\n\n    || '% ' ||\n    \n    case when z.last_value > z.last_avg then 'greater than' \n    when z.last_value = z.last_avg then 'equal to'\n    else 'less than' end\n\n    || ' average.'\n as message,\n    \n    case \n        when z.metric = 'freshness' \n            then cast(\n    \n    trim(to_char(\n    cast(z.last_value as \n    \n    FLOAT\n\n) / 3600\n, '9999999999999999990D00'))\n\n as \n    \n    STRING\n\n) || ' hours'\n        when \n    \n    regexp_like(Z.METRIC, 'percent')\n\n \n            then cast(\n    \n    trim(to_char(z.last_value, '9999999999999999990D00'))\n\n as \n    \n    STRING\n\n) || '%'\n        when \n    \n    regexp_like(Z.METRIC, 'count')\n\n \n            then cast(z.last_value as \n    \n    STRING\n\n)\n        else cast(\n    \n    trim(to_char(z.last_value, '9999999999999999990D00'))\n\n as \n    \n    STRING\n\n)\n    end\n\n as last_value_text\nfrom\n    DB_DBT_DEMO_101.L3_GOLD.re_data_z_score z \nleft join DB_DBT_DEMO_101.L3_GOLD.re_data_selected m \non split_part(\n\n    regexp_replace( table_name, '(\")|(`)', ''), '.', 1) = m.database\nand split_part(\n\n    regexp_replace( table_name, '(\")|(`)', ''), '.', 2) = m.schema\nand split_part(\n\n    regexp_replace( table_name, '(\")|(`)', ''), '.', 3) = m.name\nwhere\n    case when (lower(coalesce(\n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'direction' )\n\n, 'both')) = 'up' and z.last_value > z.last_avg)\n        or (lower(coalesce(\n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'direction' )\n\n, 'both')) = 'down' and z.last_value < z.last_avg)\n        or (lower(coalesce(\n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'direction' )\n\n, 'both')) != 'up' and lower(coalesce(\n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'direction' )\n\n, 'both')) != 'down')\n        then\n            case \n                when \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'name' )\n\n = 'z_score' \n                    then abs(z_score_value) > cast(\n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'threshold' )\n\n as \n    \n    FLOAT\n\n)\n                when \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'name' )\n\n = 'modified_z_score' \n                    then abs(modified_z_score_value) > cast( \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'threshold' )\n\n as \n    \n    FLOAT\n\n )\n                when \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'name' )\n\n = 'boxplot' \n                    then (\n                        z.last_value < z.last_first_quartile - (cast( \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'whisker_boundary_multiplier' )\n\n as \n    \n    FLOAT\n\n ) * z.last_iqr)\n                        or \n                        z.last_value > z.last_third_quartile + (cast( \n\n  json_extract_path_text(try_parse_json( m.anomaly_detector ), 'whisker_boundary_multiplier' )\n\n as \n    \n    FLOAT\n\n ) * z.last_iqr)\n                    )\n                else false\n            end\n        else false\n    end", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_anomalies"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-10T17:47:05.699005Z", "completed_at": "2024-05-10T17:47:05.709510Z"}, {"name": "execute", "started_at": "2024-05-10T17:47:05.710991Z", "completed_at": "2024-05-10T17:47:05.710998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014637947082519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.re_data.re_data_alerts", "compiled": true, "compiled_code": "select\n    'anomaly' as type,\n    \n\n    regexp_replace( table_name, '(\")|(`)', '') as model,\n    message,\n    last_value_text as value,\n    time_window_end\nfrom\n    DB_DBT_DEMO_101.L3_GOLD.re_data_anomalies\nunion all\n\nselect\n    'schema_change' as type,\n    \n\n    regexp_replace( table_name, '(\")|(`)', '') as model,\n    \n    case \n        when operation = 'column_added'\n            then 'column ' || column_name || ' of type ' || data_type || ' was added.'\n        when operation = 'column_removed'\n            then 'column ' || prev_column_name || ' of type ' || prev_data_type || ' was removed.'\n        when operation = 'type_change'\n            then column_name || ' column data type was changed from ' || prev_data_type || ' to ' || data_type || '.'\n        else ''\n    end\n as message,\n    '' as value,\n    detected_time as time_window_end\nfrom DB_DBT_DEMO_101.L3_GOLD.re_data_schema_changes\n\nunion all\n\nselect\n    'test' as type,\n    table_name as model,\n    \n    case \n        when column_name is null\n            then 'Test ' || test_name || ' failed.'\n        else\n            'Test ' || test_name || ' failed for column ' || column_name || '.'\n    end\n,\n    status as value,\n    run_at as time_window_end\n\nfrom DB_DBT_DEMO_101.L3_GOLD.re_data_test_history\nwhere status = 'Fail' or status = 'Error'", "relation_name": "DB_DBT_DEMO_101.L3_GOLD.re_data_alerts"}], "elapsed_time": 3.659058094024658, "args": {"vars": {}, "empty_catalog": false, "quiet": false, "print": true, "profiles_dir": "./", "version_check": true, "strict_mode": false, "defer": false, "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "printer_width": 80, "static": false, "log_level_file": "debug", "show_resource_report": false, "enable_legacy_logger": false, "favor_state": false, "log_format": "default", "log_level": "info", "log_file_max_bytes": 10485760, "which": "generate", "exclude": [], "static_parser": true, "cache_selected_only": false, "partial_parse_file_diff": true, "select": [], "log_format_file": "debug", "send_anonymous_usage_stats": true, "write_json": true, "compile": true, "macro_debugging": false, "partial_parse": true, "project_dir": "/home/runner/work/sp_dbt_poc/sp_dbt_poc/sp_dbt_poc", "indirect_selection": "eager", "log_path": "/home/runner/work/sp_dbt_poc/sp_dbt_poc/sp_dbt_poc/logs", "use_colors_file": true, "invocation_command": "dbt docs generate", "introspect": true, "populate_cache": true}}